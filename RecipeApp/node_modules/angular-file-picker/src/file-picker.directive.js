import { Directive, ElementRef, EventEmitter, Input, HostListener, Output, Renderer2 } from '@angular/core';
import { PickedFileImpl } from './picked-file-impl';
var FilePickerDirective = (function () {
    function FilePickerDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.accept = '';
        this.filePick = new EventEmitter();
    }
    Object.defineProperty(FilePickerDirective.prototype, "multiple", {
        get: function () { return this._multiple; },
        set: function (value) { this._multiple = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    FilePickerDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.input = this.renderer.createElement('input');
        this.renderer.appendChild(this.el.nativeElement, this.input);
        this.renderer.setAttribute(this.input, 'type', 'file');
        this.renderer.setAttribute(this.input, 'accept', this.accept);
        this.renderer.setStyle(this.input, 'display', 'none');
        if (this.multiple) {
            this.renderer.setAttribute(this.input, 'multiple', 'multiple');
        }
        this.renderer.listen(this.input, 'change', function (event) {
            for (var _i = 0, _a = event.target.files; _i < _a.length; _i++) {
                var file = _a[_i];
                _this.readFile(file);
            }
        });
    };
    FilePickerDirective.prototype.reset = function () {
        if (!this.input) {
            console.error('It seems that ngOnInit() has not been executed or that the hidden input element is null. Did you mess with the DOM?');
            return;
        }
        this.input.value = null;
    };
    FilePickerDirective.prototype.browse = function () {
        if (!this.input) {
            console.error('It seems that ngOnInit() has not been executed or that the hidden input element is null. Did you mess with the DOM?');
            return;
        }
        this.input.click();
    };
    FilePickerDirective.prototype.readFile = function (file) {
        var _this = this;
        var reader = new FileReader();
        reader.onload = function (loaded) {
            var fileReader = loaded.target;
            var pickedFile = new PickedFileImpl(file.lastModifiedDate, file.name, file.size, file.type, fileReader.result);
            _this.filePick.emit(pickedFile);
        };
        reader.readAsDataURL(file);
    };
    return FilePickerDirective;
}());
export { FilePickerDirective };
FilePickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngFilePicker]'
            },] },
];
/** @nocollapse */
FilePickerDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
]; };
FilePickerDirective.propDecorators = {
    'accept': [{ type: Input },],
    'multiple': [{ type: Input },],
    'filePick': [{ type: Output },],
    'browse': [{ type: HostListener, args: ['click',] },],
};
function coerceBooleanProperty(value) {
    return value != null && "" + value !== 'false';
}
//# sourceMappingURL=file-picker.directive.js.map